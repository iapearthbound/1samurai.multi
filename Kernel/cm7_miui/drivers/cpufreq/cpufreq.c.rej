--- drivers/cpufreq/cpufreq.c
+++ drivers/cpufreq/cpufreq.c
@@ -29,9 +29,19 @@
 #include <linux/completion.h>
 #include <linux/mutex.h>
 
+#ifdef CONFIG_MACH_VICTORY
+#include <mach/cpu-freq-v210.h>
+#endif
+
 #define dprintk(msg...) cpufreq_debug_printk(CPUFREQ_DEBUG_CORE, \
 						"cpufreq-core", msg)
 
+/* UV */
+extern unsigned int freq_uv_table[NUM_FREQ][3];
+int exp_UV_mV[NUM_FREQ] =     { 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0 };
+int enabled_freqs[NUM_FREQ] = { 0, 0, 0, 0, 0,  1, 0, 1, 0, 1, 1, 1 };
+/*  clock freqs               { 1.4GHz, 1.3GHz, 1.2GHz, 1.1GHz, 1.0GHz, 900MHz, 800MHz, 600MHz, 400MHz, 200MHz, 100MHz } */
+
 /**
  * The "cpufreq driver" - the arch- or hardware-dependent low
  * level driver of CPUFreq support, and its spinlock. This lock
@@ -739,10 +816,14 @@
 cpufreq_freq_attr_ro(bios_limit);
 cpufreq_freq_attr_ro(related_cpus);
 cpufreq_freq_attr_ro(affected_cpus);
+cpufreq_freq_attr_ro(frequency_voltage_table);
 cpufreq_freq_attr_rw(scaling_min_freq);
 cpufreq_freq_attr_rw(scaling_max_freq);
 cpufreq_freq_attr_rw(scaling_governor);
 cpufreq_freq_attr_rw(scaling_setspeed);
+/* UV table */
+cpufreq_freq_attr_rw(UV_mV_table);
+cpufreq_freq_attr_rw(states_enabled_table);
 
 static struct attribute *default_attrs[] = {
 	&cpuinfo_min_freq.attr,
@@ -756,6 +837,9 @@
 	&scaling_driver.attr,
 	&scaling_available_governors.attr,
 	&scaling_setspeed.attr,
+	&UV_mV_table.attr,
+	&frequency_voltage_table.attr,
+	&states_enabled_table.attr,
 	NULL
 };
 
