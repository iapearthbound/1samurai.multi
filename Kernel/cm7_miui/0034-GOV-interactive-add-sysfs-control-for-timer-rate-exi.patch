From 0eafbee226dadbe46ed8246c316da52e60656a7c Mon Sep 17 00:00:00 2001
From: Justin <earthbound.iap@gmail.com>
Date: Sun, 5 Feb 2012 22:15:06 -0500
Subject: [PATCH 34/35] GOV: interactive add sysfs control for timer rate
 <-(existz)


diff --git a/Kernel/drivers/cpufreq/cpufreq_interactive.c b/Kernel/drivers/cpufreq/cpufreq_interactive.c
index 2478275..f163541 100644
--- a/Kernel/drivers/cpufreq/cpufreq_interactive.c
+++ b/Kernel/drivers/cpufreq/cpufreq_interactive.c
@@ -67,6 +67,12 @@ static unsigned long go_maxspeed_load;
 #define DEFAULT_MIN_SAMPLE_TIME 40000;
 static unsigned long min_sample_time;
 
+/*
+ * The sample rate of the timer used to increase frequency
+ */
+#define DEFAULT_TIMER_RATE 30000;
+static unsigned long timer_rate;
+
 #define DEBUG 0
 #define BUFSZ 128
 
@@ -324,7 +330,7 @@ rearm:
 
 		pcpu->time_in_idle = get_cpu_idle_time_us(
 			data, &pcpu->idle_exit_time);
-		mod_timer(&pcpu->cpu_timer, jiffies + 2);
+		mod_timer(&pcpu->cpu_timer, jiffies + usecs_to_jiffies(timer_rate));
 		dbgpr("timer %d: set timer for %lu exit=%llu\n", (int) data, pcpu->cpu_timer.expires, pcpu->idle_exit_time);
 	}
 
@@ -361,7 +367,7 @@ static void cpufreq_interactive_idle(void)
 			pcpu->time_in_idle = get_cpu_idle_time_us(
 				smp_processor_id(), &pcpu->idle_exit_time);
 			pcpu->timer_idlecancel = 0;
-			mod_timer(&pcpu->cpu_timer, jiffies + 2);
+			mod_timer(&pcpu->cpu_timer, jiffies + usecs_to_jiffies(timer_rate));
 			dbgpr("idle: enter at %d, set timer for %lu exit=%llu\n",
 			      pcpu->target_freq, pcpu->cpu_timer.expires,
 			      pcpu->idle_exit_time);
@@ -409,7 +415,7 @@ static void cpufreq_interactive_idle(void)
 			get_cpu_idle_time_us(smp_processor_id(),
 					     &pcpu->idle_exit_time);
 		pcpu->timer_idlecancel = 0;
-		mod_timer(&pcpu->cpu_timer, jiffies + 2);
+		mod_timer(&pcpu->cpu_timer, jiffies + usecs_to_jiffies(timer_rate));
 		dbgpr("idle: exit, set timer for %lu exit=%llu\n", pcpu->cpu_timer.expires, pcpu->idle_exit_time);
 #if DEBUG
 	} else if (timer_pending(&pcpu->cpu_timer) == 0 &&
@@ -548,9 +554,33 @@ static ssize_t store_min_sample_time(struct kobject *kobj,
 static struct global_attr min_sample_time_attr = __ATTR(min_sample_time, 0644,
 		show_min_sample_time, store_min_sample_time);
 
+static ssize_t show_timer_rate(struct kobject *kobj,
+
+      struct attribute *attr, char *buf)
+{
+  return sprintf(buf, "%lu\n", timer_rate);
+}
+
+static ssize_t store_timer_rate(struct kobject *kobj,
+      struct attribute *attr, const char *buf, size_t count)
+{
+  int ret;
+  unsigned long val;
+
+  ret = strict_strtoul(buf, 0, &val);
+  if (ret < 0)
+    return ret;
+  timer_rate = val;
+  return count;
+}
+
+static struct global_attr timer_rate_attr = __ATTR(timer_rate, 0644,
+    show_timer_rate, store_timer_rate);
+
 static struct attribute *interactive_attributes[] = {
 	&go_maxspeed_load_attr.attr,
 	&min_sample_time_attr.attr,
+	&timer_rate_attr.attr,
 	NULL,
 };
 
@@ -635,6 +665,7 @@ static int __init cpufreq_interactive_init(void)
 
 	go_maxspeed_load = DEFAULT_GO_MAXSPEED_LOAD;
 	min_sample_time = DEFAULT_MIN_SAMPLE_TIME;
+	timer_rate = DEFAULT_TIMER_RATE;
 
 	/* Initalize per-cpu timers */
 	for_each_possible_cpu(i) {
-- 
1.7.5.4

